//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputSys/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""e0ecc853-7e89-4e3a-a3cb-c3edb6019f05"",
            ""actions"": [
                {
                    ""name"": ""Head"",
                    ""type"": ""Value"",
                    ""id"": ""2273e5d5-03ed-4b30-aa0a-cfb41abe16da"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""0c12165c-cfb5-4a3f-a9db-01cefa630326"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""23b64d14-913e-4a66-8fd8-73d091adcc3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Value"",
                    ""id"": ""e29df032-26ec-41d7-afbe-2832ed596814"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GearChanger"",
                    ""type"": ""Button"",
                    ""id"": ""7051371b-e026-41e6-994b-9cb0de18634b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GearChanger1"",
                    ""type"": ""Button"",
                    ""id"": ""9cfa7c71-48d3-47c1-a52e-6cfc74fd4780"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GearChanger2"",
                    ""type"": ""Button"",
                    ""id"": ""f2b1370b-f9cb-4ce1-9553-1579ab4ced08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GearChanger3"",
                    ""type"": ""Button"",
                    ""id"": ""633d8f28-41af-451f-9824-9ef2edc0b7b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GearChanger4"",
                    ""type"": ""Button"",
                    ""id"": ""f4df0138-b899-444b-b699-f82fdc077c3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Value"",
                    ""id"": ""f080156a-28f1-4d00-9135-5c419ed9decd"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Value"",
                    ""id"": ""ee796a3f-d0a0-4837-b800-ea02d3cb0e62"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""006e0b6e-ceff-439c-9564-5459bc394d14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Value"",
                    ""id"": ""aaf19b6f-eefc-4341-b9d3-09db295b10d7"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReLoad"",
                    ""type"": ""Button"",
                    ""id"": ""a8f3d90c-b670-4197-904e-712d7a0d28b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79891e1f-8766-447b-a433-3425ad60bb65"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Head"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a427bd70-b76e-4e91-8f54-4f50846120bb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""76c1d4a8-0bd8-4183-bfe6-89cd71dc1a56"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6059d2e2-217d-4217-acdd-f6a9ab7d1ac0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ec2b4236-2120-4e2b-9436-a68a978fa584"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a1313926-e883-40e2-a9df-ae13c8332488"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""537d569f-ecc3-4c76-b878-fffa321e8fb9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11471e11-06cc-4582-886c-ae359644ce47"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9df3b67a-ab44-4311-a887-4f90974eb6b0"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""GearChanger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a551abaa-48c7-4f79-93ca-24065f01cd11"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3715b62-d7fd-4570-8075-d4a318673fb8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""116585c3-42b0-4837-b630-bf0ed9a60df4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f58d037-f80d-4ec6-8c3d-1947a7f9132b"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""GearChanger1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0f0d99e-466f-462c-a3ca-708da3d2f4fc"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""GearChanger2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""311a6b03-ccd9-4afc-86ed-15442d5e11e5"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""GearChanger3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c89d329-0250-4c3a-8404-473c7db05985"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""GearChanger4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52b06be0-235b-49a2-8fd9-d316918fbd8e"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6dcf7ca-9fd5-4587-b5fe-5db49068b3df"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""ReLoad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ability"",
            ""id"": ""bc67089c-3953-42e0-b465-0826f473922a"",
            ""actions"": [
                {
                    ""name"": ""ability1"",
                    ""type"": ""Button"",
                    ""id"": ""0f8da2db-7d70-4fd8-8b7b-1104fbec6164"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ability2"",
                    ""type"": ""Button"",
                    ""id"": ""93f08e9f-2417-47cf-9a1b-e88350e3ee8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ult"",
                    ""type"": ""Button"",
                    ""id"": ""60979237-f178-4bfa-a810-bac2a3d5cc83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""562d70a1-ed04-4c61-a586-64f316e4ecca"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ability1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7981bc75-67e0-4ebd-a803-e3aa0a4de0e9"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ability2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9589531-45ab-46a4-995c-f91457d46600"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ult"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""id"": ""adb995fc-c94c-46eb-b45a-4cd5079fd00c"",
            ""actions"": [
                {
                    ""name"": ""Test3"",
                    ""type"": ""Button"",
                    ""id"": ""a51158f0-1e00-492f-89ef-dc4dd3c1e969"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test2"",
                    ""type"": ""Button"",
                    ""id"": ""34d78223-1f87-4b27-8ae3-6ef1fc0bca5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test1"",
                    ""type"": ""Button"",
                    ""id"": ""342fd224-b6d3-401c-aac5-e650dd5c34c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""29a616bf-845d-4eb8-98a6-2678da0522dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""878e087f-b1db-4f2c-9148-f3e0dbdcf453"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""987b8aa2-9a89-4390-a1ab-3d5d1d6c852e"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Test1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cad6313-c7ec-47c4-9266-387203c0b2dc"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Test2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98937953-581b-4b73-b05d-762076b1fc5c"",
                    ""path"": ""<Keyboard>/f4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Test3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KM"",
            ""bindingGroup"": ""KM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_Head = m_Move.FindAction("Head", throwIfNotFound: true);
        m_Move_WASD = m_Move.FindAction("WASD", throwIfNotFound: true);
        m_Move_Jump = m_Move.FindAction("Jump", throwIfNotFound: true);
        m_Move_Drop = m_Move.FindAction("Drop", throwIfNotFound: true);
        m_Move_GearChanger = m_Move.FindAction("GearChanger", throwIfNotFound: true);
        m_Move_GearChanger1 = m_Move.FindAction("GearChanger1", throwIfNotFound: true);
        m_Move_GearChanger2 = m_Move.FindAction("GearChanger2", throwIfNotFound: true);
        m_Move_GearChanger3 = m_Move.FindAction("GearChanger3", throwIfNotFound: true);
        m_Move_GearChanger4 = m_Move.FindAction("GearChanger4", throwIfNotFound: true);
        m_Move_Use = m_Move.FindAction("Use", throwIfNotFound: true);
        m_Move_Fire = m_Move.FindAction("Fire", throwIfNotFound: true);
        m_Move_Zoom = m_Move.FindAction("Zoom", throwIfNotFound: true);
        m_Move_Dash = m_Move.FindAction("Dash", throwIfNotFound: true);
        m_Move_ReLoad = m_Move.FindAction("ReLoad", throwIfNotFound: true);
        // Ability
        m_Ability = asset.FindActionMap("Ability", throwIfNotFound: true);
        m_Ability_ability1 = m_Ability.FindAction("ability1", throwIfNotFound: true);
        m_Ability_ability2 = m_Ability.FindAction("ability2", throwIfNotFound: true);
        m_Ability_Ult = m_Ability.FindAction("Ult", throwIfNotFound: true);
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_Test3 = m_Test.FindAction("Test3", throwIfNotFound: true);
        m_Test_Test2 = m_Test.FindAction("Test2", throwIfNotFound: true);
        m_Test_Test1 = m_Test.FindAction("Test1", throwIfNotFound: true);
        m_Test_Test = m_Test.FindAction("Test", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private List<IMoveActions> m_MoveActionsCallbackInterfaces = new List<IMoveActions>();
    private readonly InputAction m_Move_Head;
    private readonly InputAction m_Move_WASD;
    private readonly InputAction m_Move_Jump;
    private readonly InputAction m_Move_Drop;
    private readonly InputAction m_Move_GearChanger;
    private readonly InputAction m_Move_GearChanger1;
    private readonly InputAction m_Move_GearChanger2;
    private readonly InputAction m_Move_GearChanger3;
    private readonly InputAction m_Move_GearChanger4;
    private readonly InputAction m_Move_Use;
    private readonly InputAction m_Move_Fire;
    private readonly InputAction m_Move_Zoom;
    private readonly InputAction m_Move_Dash;
    private readonly InputAction m_Move_ReLoad;
    public struct MoveActions
    {
        private @PlayerInput m_Wrapper;
        public MoveActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Head => m_Wrapper.m_Move_Head;
        public InputAction @WASD => m_Wrapper.m_Move_WASD;
        public InputAction @Jump => m_Wrapper.m_Move_Jump;
        public InputAction @Drop => m_Wrapper.m_Move_Drop;
        public InputAction @GearChanger => m_Wrapper.m_Move_GearChanger;
        public InputAction @GearChanger1 => m_Wrapper.m_Move_GearChanger1;
        public InputAction @GearChanger2 => m_Wrapper.m_Move_GearChanger2;
        public InputAction @GearChanger3 => m_Wrapper.m_Move_GearChanger3;
        public InputAction @GearChanger4 => m_Wrapper.m_Move_GearChanger4;
        public InputAction @Use => m_Wrapper.m_Move_Use;
        public InputAction @Fire => m_Wrapper.m_Move_Fire;
        public InputAction @Zoom => m_Wrapper.m_Move_Zoom;
        public InputAction @Dash => m_Wrapper.m_Move_Dash;
        public InputAction @ReLoad => m_Wrapper.m_Move_ReLoad;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void AddCallbacks(IMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveActionsCallbackInterfaces.Add(instance);
            @Head.started += instance.OnHead;
            @Head.performed += instance.OnHead;
            @Head.canceled += instance.OnHead;
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
            @GearChanger.started += instance.OnGearChanger;
            @GearChanger.performed += instance.OnGearChanger;
            @GearChanger.canceled += instance.OnGearChanger;
            @GearChanger1.started += instance.OnGearChanger1;
            @GearChanger1.performed += instance.OnGearChanger1;
            @GearChanger1.canceled += instance.OnGearChanger1;
            @GearChanger2.started += instance.OnGearChanger2;
            @GearChanger2.performed += instance.OnGearChanger2;
            @GearChanger2.canceled += instance.OnGearChanger2;
            @GearChanger3.started += instance.OnGearChanger3;
            @GearChanger3.performed += instance.OnGearChanger3;
            @GearChanger3.canceled += instance.OnGearChanger3;
            @GearChanger4.started += instance.OnGearChanger4;
            @GearChanger4.performed += instance.OnGearChanger4;
            @GearChanger4.canceled += instance.OnGearChanger4;
            @Use.started += instance.OnUse;
            @Use.performed += instance.OnUse;
            @Use.canceled += instance.OnUse;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @ReLoad.started += instance.OnReLoad;
            @ReLoad.performed += instance.OnReLoad;
            @ReLoad.canceled += instance.OnReLoad;
        }

        private void UnregisterCallbacks(IMoveActions instance)
        {
            @Head.started -= instance.OnHead;
            @Head.performed -= instance.OnHead;
            @Head.canceled -= instance.OnHead;
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
            @GearChanger.started -= instance.OnGearChanger;
            @GearChanger.performed -= instance.OnGearChanger;
            @GearChanger.canceled -= instance.OnGearChanger;
            @GearChanger1.started -= instance.OnGearChanger1;
            @GearChanger1.performed -= instance.OnGearChanger1;
            @GearChanger1.canceled -= instance.OnGearChanger1;
            @GearChanger2.started -= instance.OnGearChanger2;
            @GearChanger2.performed -= instance.OnGearChanger2;
            @GearChanger2.canceled -= instance.OnGearChanger2;
            @GearChanger3.started -= instance.OnGearChanger3;
            @GearChanger3.performed -= instance.OnGearChanger3;
            @GearChanger3.canceled -= instance.OnGearChanger3;
            @GearChanger4.started -= instance.OnGearChanger4;
            @GearChanger4.performed -= instance.OnGearChanger4;
            @GearChanger4.canceled -= instance.OnGearChanger4;
            @Use.started -= instance.OnUse;
            @Use.performed -= instance.OnUse;
            @Use.canceled -= instance.OnUse;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @ReLoad.started -= instance.OnReLoad;
            @ReLoad.performed -= instance.OnReLoad;
            @ReLoad.canceled -= instance.OnReLoad;
        }

        public void RemoveCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // Ability
    private readonly InputActionMap m_Ability;
    private List<IAbilityActions> m_AbilityActionsCallbackInterfaces = new List<IAbilityActions>();
    private readonly InputAction m_Ability_ability1;
    private readonly InputAction m_Ability_ability2;
    private readonly InputAction m_Ability_Ult;
    public struct AbilityActions
    {
        private @PlayerInput m_Wrapper;
        public AbilityActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ability1 => m_Wrapper.m_Ability_ability1;
        public InputAction @ability2 => m_Wrapper.m_Ability_ability2;
        public InputAction @Ult => m_Wrapper.m_Ability_Ult;
        public InputActionMap Get() { return m_Wrapper.m_Ability; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AbilityActions set) { return set.Get(); }
        public void AddCallbacks(IAbilityActions instance)
        {
            if (instance == null || m_Wrapper.m_AbilityActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AbilityActionsCallbackInterfaces.Add(instance);
            @ability1.started += instance.OnAbility1;
            @ability1.performed += instance.OnAbility1;
            @ability1.canceled += instance.OnAbility1;
            @ability2.started += instance.OnAbility2;
            @ability2.performed += instance.OnAbility2;
            @ability2.canceled += instance.OnAbility2;
            @Ult.started += instance.OnUlt;
            @Ult.performed += instance.OnUlt;
            @Ult.canceled += instance.OnUlt;
        }

        private void UnregisterCallbacks(IAbilityActions instance)
        {
            @ability1.started -= instance.OnAbility1;
            @ability1.performed -= instance.OnAbility1;
            @ability1.canceled -= instance.OnAbility1;
            @ability2.started -= instance.OnAbility2;
            @ability2.performed -= instance.OnAbility2;
            @ability2.canceled -= instance.OnAbility2;
            @Ult.started -= instance.OnUlt;
            @Ult.performed -= instance.OnUlt;
            @Ult.canceled -= instance.OnUlt;
        }

        public void RemoveCallbacks(IAbilityActions instance)
        {
            if (m_Wrapper.m_AbilityActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAbilityActions instance)
        {
            foreach (var item in m_Wrapper.m_AbilityActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AbilityActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AbilityActions @Ability => new AbilityActions(this);

    // Test
    private readonly InputActionMap m_Test;
    private List<ITestActions> m_TestActionsCallbackInterfaces = new List<ITestActions>();
    private readonly InputAction m_Test_Test3;
    private readonly InputAction m_Test_Test2;
    private readonly InputAction m_Test_Test1;
    private readonly InputAction m_Test_Test;
    public struct TestActions
    {
        private @PlayerInput m_Wrapper;
        public TestActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test3 => m_Wrapper.m_Test_Test3;
        public InputAction @Test2 => m_Wrapper.m_Test_Test2;
        public InputAction @Test1 => m_Wrapper.m_Test_Test1;
        public InputAction @Test => m_Wrapper.m_Test_Test;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void AddCallbacks(ITestActions instance)
        {
            if (instance == null || m_Wrapper.m_TestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestActionsCallbackInterfaces.Add(instance);
            @Test3.started += instance.OnTest3;
            @Test3.performed += instance.OnTest3;
            @Test3.canceled += instance.OnTest3;
            @Test2.started += instance.OnTest2;
            @Test2.performed += instance.OnTest2;
            @Test2.canceled += instance.OnTest2;
            @Test1.started += instance.OnTest1;
            @Test1.performed += instance.OnTest1;
            @Test1.canceled += instance.OnTest1;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
        }

        private void UnregisterCallbacks(ITestActions instance)
        {
            @Test3.started -= instance.OnTest3;
            @Test3.performed -= instance.OnTest3;
            @Test3.canceled -= instance.OnTest3;
            @Test2.started -= instance.OnTest2;
            @Test2.performed -= instance.OnTest2;
            @Test2.canceled -= instance.OnTest2;
            @Test1.started -= instance.OnTest1;
            @Test1.performed -= instance.OnTest1;
            @Test1.canceled -= instance.OnTest1;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
        }

        public void RemoveCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestActions instance)
        {
            foreach (var item in m_Wrapper.m_TestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestActions @Test => new TestActions(this);
    private int m_KMSchemeIndex = -1;
    public InputControlScheme KMScheme
    {
        get
        {
            if (m_KMSchemeIndex == -1) m_KMSchemeIndex = asset.FindControlSchemeIndex("KM");
            return asset.controlSchemes[m_KMSchemeIndex];
        }
    }
    public interface IMoveActions
    {
        void OnHead(InputAction.CallbackContext context);
        void OnWASD(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
        void OnGearChanger(InputAction.CallbackContext context);
        void OnGearChanger1(InputAction.CallbackContext context);
        void OnGearChanger2(InputAction.CallbackContext context);
        void OnGearChanger3(InputAction.CallbackContext context);
        void OnGearChanger4(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnReLoad(InputAction.CallbackContext context);
    }
    public interface IAbilityActions
    {
        void OnAbility1(InputAction.CallbackContext context);
        void OnAbility2(InputAction.CallbackContext context);
        void OnUlt(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnTest3(InputAction.CallbackContext context);
        void OnTest2(InputAction.CallbackContext context);
        void OnTest1(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
    }
}
